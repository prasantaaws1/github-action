name: Deploy to Amazon ECS
on:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: ecs-cluster
  CONTAINER_NAME: app
  ECS_SERVICE: ecs-service
  ECS_TASK_DEFINITION: ecs-app-task

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}
    defaults:
      run:
        working-directory: infrastructure  

    steps:
      - name: Checkout
        uses: actions/checkout@v2
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan 

      - name: Terraform Plan
        id: apply
        run: terraform apply -auto-approve 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: "424567178047.dkr.ecr.us-east-1.amazonaws.com"
          ECR_REPOSITORY: "app_repo"
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 

  
      # - name: Deploy Amazon ECS task definition
      #   id: deploy
      #   run: |
      #     # Update ECS Service with the new task definition
      #     aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION --force-new-deployment
  
      # - name: Wait for deployment to stabilize
      #   id: wait
      #   run: |
      #     # Wait for the deployment to stabilize
      #     STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].rolloutState' --output text)
      #     while [[ $STATUS != "COMPLETED" && $STATUS != "FAILED" ]]; do
      #       echo "Waiting for deployment to stabilize..."
      #       sleep 30
      #       STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].rolloutState' --output text)
      #     done
      #     echo "Deployment status: $STATUS"
      #     echo "::set-output name=status::$STATUS"
  
      # - name: Rollback if deployment failed
      #   if: steps.wait.outputs.status == 'FAILED'
      #   run: |
      #     # Rollback to the previous task definition
      #     PREV_TASK_DEFINITION=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[1].taskDefinition' --output text)
      #     aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $PREV_TASK_DEFINITION --force-new-deployment
      #     echo "Rollback to previous task definition ($PREV_TASK_DEFINITION) initiated."
  
      # - name: Notify on rollback
      #   if: steps.wait.outputs.status == 'FAILED'
      #   run: |
      #     echo "Deployment failed. Rollback has been initiated. Please check ECS for further details."
  
  
      # - name: Deploy Amazon ECS task definition
      #   run: 
      #     aws ecs update-service --cluster $ECS_CLUSTER --no-paginate --service $ECS_SERVICE --force-new-deployment
          






          
